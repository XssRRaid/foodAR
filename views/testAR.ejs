<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <script src="https://aframe.io/releases/1.0.4/aframe.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <script src="https://raw.githack.com/donmccurdy/aframe-extras/master/dist/aframe-extras.loaders.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/studio-backend/master/src/modules/marker/tools/gesture-detector.js"></script>
    <script src="https://raw.githack.com/AR-js-org/studio-backend/master/src/modules/marker/tools/gesture-handler.js"></script>
    
    <title>Loading AR..</title>

    <!-- Loading Screen Styles -->
    <style>
        .arjs-loader {
        height: 100%;
        width: 100%;
        position: absolute;
        top: 0;
        left: 0;
        background-color: rgba(0, 0, 0, 0.8);
        z-index: 9999;
        display: flex;
        justify-content: center;
        align-items: center;
        }
    
        .arjs-loader div {
        text-align: center;
        font-size: 1.25em;
        color: white;
        }

        .a-loader-title {
   color: red;
 }
    </style>
</head>

<body>

      <!-- Minimal Loader Description until the assets are loaded -->
  <!-- <div class="arjs-loader">
    <div>Loading, please wait...</div>
  </div> -->

  <script>

    // store visibility data in object;
    //  can only draw line when both are visible.
    let markerVisible = { m0: false, m1: false };
    
    AFRAME.registerComponent('registerevents', {
        init: function () 
        {
            let marker = this.el;
            
            marker.addEventListener('markerFound', function() {
                markerVisible[ marker.id ] = true;
            });
    
            marker.addEventListener('markerLost', function() {
                markerVisible[ marker.id ] = false;
            });
        }
    });
    
    AFRAME.registerComponent('run', {
        init: function()
        {
            this.m0 = document.querySelector("#m0");
            this.m1 = document.querySelector("#m1");
            this.p0 = new THREE.Vector3();
            this.p1 = new THREE.Vector3(); 
            
            this.geometry = new THREE.Geometry();
            this.geometry.vertices.push( new THREE.Vector3(-1,-1,-1) );
            this.geometry.vertices.push( new THREE.Vector3( 1, 1, 1) );
            this.material = new THREE.LineBasicMaterial( {color: 0xFF0000} );
            this.line = new THREE.Line( this.geometry, this.material );
            let scene = document.querySelector('a-scene').object3D;
            scene.add( this.line );
        },
        
        tick: function (time, deltaTime) 
        {
            if ( markerVisible["m0"] && markerVisible["m1"] )
            {
                this.m0.object3D.getWorldPosition(this.p0);
                this.m1.object3D.getWorldPosition(this.p1);
                this.geometry.vertices[0] = this.p0;
                this.geometry.vertices[1] = this.p1;
                this.geometry.verticesNeedUpdate = true;
                this.line.visible = true;
            }
            else
            {
                this.line.visible = false;
            }
        }
    });
    
    </script>

  <a-scene embedded vr-mode-ui="enabled: false;" arjs="debugUIEnabled: false; detectionMode: mono_and_matrix; matrixCodeType: 3x3;">

    <a-marker type="barcode" value="0" id="m0" registerevents>
        <a-plane position="0 0 0" 
                 rotation="-90 0 0"
                 material="color: white; transparent: true; opacity: 0.10;">
        </a-plane>
    </a-marker>

    <a-marker type="barcode" value="1" id="m1" registerevents>
        <a-plane position="0 0 0" 
                 rotation="-90 0 0"
                 material="color: white; transparent: true; opacity: 0.10;">
        </a-plane>
    </a-marker>
    

    <a-entity camera></a-entity>

    <a-entity run></a-entity>

</a-scene>
</body>
</html>